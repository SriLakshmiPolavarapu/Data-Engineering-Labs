{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNsUW/dPYRnCu2xksiVabpz",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SriLakshmiPolavarapu/Data-Engineering-Labs/blob/master/Data%20Transport/Performance\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# A"
      ],
      "metadata": {
        "id": "RiHgX6L42heJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "IWucXBI000f3"
      },
      "outputs": [],
      "source": [
        "import datetime\n",
        "\n",
        "with open('vehicle_ids.txt', 'r') as f:\n",
        "    vehicle_ids = [line.strip() for line in f if line.strip()]\n",
        "\n",
        "base_date = datetime.datetime(2025, 4, 10, 0, 0, 0)\n",
        "one_day = datetime.timedelta(days=1)\n",
        "hours = [base_date + datetime.timedelta(hours=i) for i in range(24)]\n",
        "\n",
        "with open('one_day_data.txt', 'w') as f:\n",
        "    for vehicle_id in vehicle_ids:\n",
        "        for timestamp in hours:\n",
        "            breadcrumb = f\"{vehicle_id},{timestamp.strftime('%Y-%m-%d %H:%M:%S')}\"\n",
        "            f.write(breadcrumb + '\\n')\n",
        "\n",
        "print(f\"Generated data for {len(vehicle_ids)} vehicles, {len(vehicle_ids) * 24} breadcrumbs total.\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Count lines in one_day_data.txt\n",
        "with open('/content/one_day_data.txt', 'r') as f:\n",
        "    line_count = len(f.readlines())\n",
        "print(f\"Number of lines in /content/one_day_data.txt: {line_count}\")"
      ],
      "metadata": {
        "id": "BM_QOKuo6Td4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "TYJO6AKH6TW-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pip install google-cloud-pubsub"
      ],
      "metadata": {
        "collapsed": true,
        "id": "_hqXW8w41o9y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# B"
      ],
      "metadata": {
        "id": "hm5Zo9Rv2jG9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "from google.cloud import pubsub_v1\n",
        "import json\n",
        "import time\n",
        "\n",
        "os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"/content/dataengineeringproject-456307-2dca2bb9e633.json\"\n",
        "\n",
        "project_id = \"dataengineeringproject-456307\"\n",
        "topic_id = \"MyTopic\"\n",
        "publisher = pubsub_v1.PublisherClient()\n",
        "topic_path = publisher.topic_path(project_id, topic_id)\n",
        "\n",
        "start_time = time.time()\n",
        "\n",
        "message_count = 0\n",
        "with open(\"/content/one_day_data.txt\", \"r\") as f:\n",
        "    for line in f:\n",
        "        vehicle_id, timestamp = line.strip().split(\",\")\n",
        "        record = {\n",
        "            \"vehicle_id\": vehicle_id,\n",
        "            \"timestamp\": timestamp\n",
        "        }\n",
        "        message = json.dumps(record).encode(\"utf-8\")\n",
        "        future = publisher.publish(topic_path, message)\n",
        "        message_count += 1\n",
        "        if message_count % 100 == 0:\n",
        "            print(f\"Published {message_count} messages so far\")\n",
        "\n",
        "end_time = time.time()\n",
        "duration = end_time - start_time\n",
        "\n",
        "print(f\"\\nTotal number of records sent through the {topic_id} topic: {message_count}\")\n",
        "print(f\"Producer took {duration:.2f} seconds to send all data\")"
      ],
      "metadata": {
        "id": "ZysI6Ofq1jPH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# C"
      ],
      "metadata": {
        "id": "cVVTiocW2kch"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "from google.cloud import pubsub_v1\n",
        "import time\n",
        "\n",
        "os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"/content/dataengineeringproject-456307-2dca2bb9e633.json\"\n",
        "\n",
        "project_id = \"dataengineeringproject-456307\"\n",
        "subscription_id = \"MySub\"\n",
        "subscriber = pubsub_v1.SubscriberClient()\n",
        "subscription_path = subscriber.subscription_path(project_id, subscription_id)\n",
        "\n",
        "message_count = 0\n",
        "\n",
        "def callback(message):\n",
        "    global message_count\n",
        "    print(f\"Received message: {message.data.decode('utf-8')}\")\n",
        "    message_count += 1\n",
        "    message.ack()\n",
        "\n",
        "start_time = time.time()\n",
        "\n",
        "streaming_pull_future = subscriber.subscribe(subscription_path, callback=callback)\n",
        "print(f\"Listening for messages on {subscription_path}...\\n\")\n",
        "\n",
        "expected_messages = 4800\n",
        "try:\n",
        "    while message_count < expected_messages:\n",
        "        time.sleep(1)\n",
        "    streaming_pull_future.cancel()\n",
        "except KeyboardInterrupt:\n",
        "    streaming_pull_future.cancel()\n",
        "\n",
        "end_time = time.time()\n",
        "duration = end_time - start_time\n",
        "\n",
        "print(f\"\\nConsumer processed {message_count} messages\")\n",
        "print(f\"Consumer took {duration:.2f} seconds to run\")"
      ],
      "metadata": {
        "id": "pXg0CArT2FN1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# D"
      ],
      "metadata": {
        "id": "wJLs9Npu2mCk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "from google.cloud import pubsub_v1\n",
        "import time\n",
        "\n",
        "os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"/content/dataengineeringproject-456307-2dca2bb9e633.json\"\n",
        "\n",
        "project_id = \"dataengineeringproject-456307\"\n",
        "subscription_id = \"MySub\"\n",
        "subscriber = pubsub_v1.SubscriberClient()\n",
        "subscription_path = subscriber.subscription_path(project_id, subscription_id)\n",
        "\n",
        "message_count = 0\n",
        "\n",
        "def callback(message):\n",
        "    global message_count\n",
        "    message_count += 1\n",
        "    message.ack()\n",
        "\n",
        "start_time = time.time()\n",
        "\n",
        "streaming_pull_future = subscriber.subscribe(subscription_path, callback=callback)\n",
        "print(f\"Listening for messages on {subscription_path}...\\n\")\n",
        "\n",
        "expected_messages = 4800\n",
        "try:\n",
        "    while message_count < expected_messages:\n",
        "        time.sleep(1)\n",
        "    streaming_pull_future.cancel()\n",
        "except KeyboardInterrupt:\n",
        "    streaming_pull_future.cancel()\n",
        "\n",
        "end_time = time.time()\n",
        "duration = end_time - start_time\n",
        "\n",
        "print(f\"\\nTotal number of messages received: {message_count}\")\n",
        "print(f\"consumer took {duration:.2f} seconds to run\")"
      ],
      "metadata": {
        "collapsed": true,
        "id": "qfOYHCRW2mBi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "P3hS3ZtUBb16"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "from google.cloud import pubsub_v1\n",
        "import time\n",
        "\n",
        "os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"/content/dataengineeringproject-456307-2dca2bb9e633.json\"\n",
        "\n",
        "project_id = \"dataengineeringproject-456307\"\n",
        "subscription_id = \"MySub\"\n",
        "subscriber = pubsub_v1.SubscriberClient()\n",
        "subscription_path = subscriber.subscription_path(project_id, subscription_id)\n",
        "\n",
        "message_count = 0\n",
        "\n",
        "def callback(message):\n",
        "    global message_count\n",
        "    message_count += 1\n",
        "    message.ack()\n",
        "\n",
        "start_time = time.time()\n",
        "\n",
        "streaming_pull_future = subscriber.subscribe(subscription_path, callback=callback)\n",
        "print(f\"Listening for messages on {subscription_path}...\\n\")\n",
        "\n",
        "expected_messages = 4800\n",
        "try:\n",
        "    while message_count < expected_messages:\n",
        "        time.sleep(1)\n",
        "    streaming_pull_future.cancel()\n",
        "except KeyboardInterrupt:\n",
        "    streaming_pull_future.cancel()\n",
        "\n",
        "end_time = time.time()\n",
        "duration = end_time - start_time\n",
        "\n",
        "print(f\"\\nTotal number of messages received: {message_count}\")\n",
        "print(f\"Consumer took {duration:.2f} seconds to run\")"
      ],
      "metadata": {
        "id": "u9PkezorBb9q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "6OkpgObnBcAJ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}